((_A,metaClass)=>{
  let classify=(obj,_class)=>{
       let result=new _class();
       Object.keys(obj).forEach((ky)=>{
            result[ky]=obj[ky];
       });
       return result;
  };
  metaClass.combinate=function(){
    let getCombinations=function(chars) {
       var result = [];
       var f = function(prefix, chars) {
         for (var i = 0; i < chars.length; i++) {
           result.push(prefix + chars[i]);
           f(prefix + chars[i], chars.slice(i + 1));
         }
       }
       f('', chars);
       return result;
      };
      return getCombinations(this);
  };
  metaClass.shuffle = function() {
      return this.sort(()=>.5 - Math.random());
   };
   metaClass.groupBy=function(key) {
      return this.reduce(function(rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
      }, {});
   };
  metaClass.classify=function(_class){
       return this.map((e)=>classify(e,_class));
  }
  metaClass.contains = function(v) {
     return this.indexOf(v)>=0;
  };
  metaClass.indexOfOld=metaClass.indexOf;
  metaClass.indexOf=function(e,fn){
    if(!fn){return this.indexOfOld(e)}
    else{
     if(typeof fn ==='string'){var att=fn;fn=function(e){return e[att];}}
      return this.map(fn).indexOfOld(e);
    }
  };
  metaClass.clone=function(){
  	var arr=[];
  	this.forEach(function(e){arr.push(e)});
  	return arr;
  };

  metaClass.ASCII=function(){
  	var s=''
  	eval('s=String.fromCharCode('+this.join(',')+')');
  	return s;
  };
  metaClass.flatten = function() {
     return this.reduce(
        (a, b) => a.concat(Array.isArray(b) ? b.flatten() : b), []
     );
   };
metaClass.empty=function(){
	return this.length ===0
};
metaClass.isFinite=function(){
	return this.map(function(e){return isFinite(e)}).inject(true,function(a,b){return a && b;})
};
metaClass.first=function(){
	if(this.empty()){
		return null;
	}
	return this[0];
};

metaClass.last=function(){
	if(this.empty()){
		return null;
	}
	return this[this.length-1]
};
metaClass.noSpace=function(){
	return this.map(function(e){return e.noSpace();});
};
metaClass.parseInt=function(){
	return this.map(function(e){return parseInt(e)});
};
/**
 * @param first argument  => the index to start  pagination .
 * */
 metaClass.offset=function(os){
           return this.filter(function(e,i){return i> os-1 });
 };
/**
 * @param first argument exist => size of pagination
 * */
metaClass.max = function() {
	if(arguments.length){ var tmp=arguments[0];return this.filter(function(e,i){return i < tmp;}); }
	  return Math.max.apply(null, this);
};

metaClass.min = function() {
	  return Math.min.apply(null, this);
};

metaClass.random=function(){
    if(this.length>=2){
       return Math.floor(Math.random()*(this[1]-this[0]+1)+this[0]);
     }

};
metaClass.unique = function() {
     return [...new Set(this)];
};
metaClass.remove = function() {
    var what, a = arguments, L = a.length, ax;
    while (L && this.length) {
        what = a[--L];
        while ((ax = this.indexOf(what)) !== -1) {
            this.splice(ax, 1);
        }
    }
    return this;
};

metaClass.isEmpty=function(){
	return this.length===0
};
metaClass.isntEmpty=function(){
	return !this.isEmpty();
};
metaClass.average=function(){
	var sum=0;
	var j=0;
	for(var i=0;i<this.length;i++){
		if(isFinite(this[i])){
		  sum=sum+parseFloat(this[i]);
		  j++;
		}
	}
	if(j===0){
		return 0;
	}else{
		return sum/j;
	}

};
metaClass.pushunique=function(v){
	if(this.indexOf(v)==-1){
		return this.push(v);
	}else{
		return this.length;
	}
};
/**
 * ['a','b','c'].subarray(1,-1)
 *  >['b','c']
 *  ['a','b','c','d'].subarray(0,-3)
 *  >['a','b']
 */
metaClass.subarray=function(start,end){
	 if(!end){
         end=-1;
      }
	return this.slice(start, this.length+1-(end*-1));
};

metaClass.frequencies = function() {
    var l = this.length, result = {all:[]};
    while (l--){
       result[this[l]] = result[this[l]] ? ++result[this[l]] : 1;
    }
    // all pairs (label, frequencies) to an array of arrays(2)
    for (var l in result){
       if (result.hasOwnProperty(l) && l !== 'all'){
          result.all.push([ l,result[l] ]);
       }
    }
    return result;
};
metaClass.clean=function(){
	var newArray = [];
    for(var index = 0; index < this.length; index++) {
        if(this[index]) {
            newArray.push(this[index]);
        }
    }
    return newArray;
};
metaClass.pluck=function(prop){
    return this.map(function(x) {
       return x[prop];
   })
};

/**
 * Array and GUI HTML.
 */
metaClass.prefixed=function(pref){
	  var tmp=[]
	  for(var i=0;i<this.length;i++){
	      tmp.push(pref+this[i]);
	   }
	   return tmp;
	 };
/**
 * Static methods of Array Class
 */
_A.asObject=function(obj){
  if(String.prototype.removeFirst && String.prototype.removeLast){
    var newarr=[];
    var tmp;
    var objson=JSON.stringify(obj).removeFirst().removeLast().split(',');
    for(var i=0;i<objson.length;i++){
      tmp=objson[i].split(':');
      newarr[tmp[0].removeFirst().removeLast()]=tmp[1];
    }
    return newarr;
  }else{
    console.log("ERROR : ", "install x-string package");
  }

};
_A.range=function(){
  let args=arguments;
  if(arguments.length===1){
    return _A.from({length:arguments[0]},(v,k)=>k);
  }
  if(arguments.length===2){
    return _A.range(arguments[1]).map((i,e)=>e+args[0]);
  }
  return [];
};
metaClass.inject=function(init,fnback){

	  var s=init,i=0;
     while(i<this.length){
  	   s=fnback.call(null,s,this[i]);
  	   i++;
     }
     return s;
};
metaClass.insert = function(index) {
    index = Math.min(index, this.length);
    arguments.length > 1
            && this.splice.apply(this, [index, 0].concat([].pop.call(arguments)))
            && this.insert.apply(this, arguments);
    return this;
};
/**
* i.e ; ["a","b"].toJsonWith(['1','2'])
*   ==> {a:1,b:2}
*/
metaClass.toJsonWith=function(arrayValues){
	console.log('{'+this.mapWithIndex(function(e,i){return '"'+e+'":"'+arrayValues[i]+'"';}	).join(',').replaceAll('"','\"')+'}')
  return JSON.parse('{'+this.mapWithIndex(function(e,i){return '"'+e+'":"'+arrayValues[i]+'"';}	).join(',').replaceAll('"','\"')+'}');
};
})(Array,Array.prototype)
