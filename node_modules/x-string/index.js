((_S,metaClass)=>{
  metaClass.startsWith=function(str){
      return this.indexOf(str)===0;
  }
  metaClass.endsWith=function(str){
    return this.lastIndexOf(str) === this.length-str.length
  }
   metaClass.reverse=function(){
     return [...this].reverse().join('');
   }
   metaClass.isUrl=function() {
    return this.length < 2083 &&  new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$', 'i').test(this);
   };
  metaClass.contains=function(sub){
    return this.indexOf(sub)!==-1
  };
  /** this=fileName or file path*/
     metaClass.capitalize=function(all){
      			if(all){
         				return this.split(' ').map(function(e){return e.capitalize();}).join(' ');
      			}else{
           			return this.charAt(0).toUpperCase() + this.slice(1);
      			}
      }
  		metaClass.fileExtension=function(OS){
  			 return this.substr((~-this.lastIndexOf(".") >>> 0) + 2);
  		};
  		/**
  		 * Required jq
  		 */
  		metaClass.urlReady=function(fnsuccess,fnfail,moo7awalet){
  			moo7awalet=moo7awalet || 10;
  		    let exist=false;
  		    let that=this;
  		    $.ajax({
  		    url:this,
  		    type:'HEAD',
  		    success:
  		        function(){
  		            if(typeof fnsuccess ==='function'){
  		                  fnsuccess.call(that);
  		              exist=true;
  		             }

  		        },
  		    error:
  		        function(){

  		    	    if(moo7awalet>0){
  		    	    	setTimeout(function(){that.urlReady(fnsuccess,fnfail,--moo7awalet)},150)
  		    	    }else{
  		    	    	if(typeof fnfail ==='function'){
  			                  fnfail.call(that);
  			             }
  		    	    }

  		        }
  		   });
  		   return exist;

  		};
  		/**
  		 * Used as following:
  		 *"http://myexample.com/ff?a=1&b=3&y=kiki".urlParams() ==> {a:1,b:3,y:'kiki'}
  		 *"http://myexample.com/ff?a=1&b=3&y=kiki".urlParams('y') ==> 'kiki'
  		 *"http://myexample.com/ff?a=1&b=3&y=kiki".urlParams('a',99) ==> http://myexample.com/ff?a=99&b=3&y=kiki

  		 */

  		metaClass.urlParams=function(param,val){
  			var urlParams;
  			var newUrl='';
        let a=document.createElement('a');
         a.href=this;
  			 var match,
  		        pl     = /\+/g,  // Regex for replacing addition symbol with a space
  		        search = /([^&=]+)=?([^&]*)/g,
  		        decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
  		        query  =a.search.substring(1);

  		    urlParams = {};
  		    while (match = search.exec(query))
  		       urlParams[decode(match[1])] = decode(match[2]);


  		    if(!param && !val){
  		    	return urlParams
  		    }else if(param && !val){
  		        return 	urlParams[param]
  		    }else{
  		    	urlParams[param]=val;
  		    	var arr=[];
  		    	for(var p in urlParams){
  		    		arr.push(encodeURIComponent(p)+'='+encodeURIComponent(urlParams[p]))
  		    	}
  		    	if(arr.length>0){newUrl='?'+arr.join('&');}

  		    	return a.origin+a.pathname+newUrl;
  		    }


  		};
  		 metaClass.urlPrasing=function(){
             let a=document.createElement('a');
  		        a.href=this;
  		        var org=a.protocol+'//'+a.hostname;if(a.port.length>0){org=org+':'+a.port};
  		        var params=this.urlParams();

  		       return {host: a.host,hostname: a.hostname, pathname: a.pathname, port: a.port, protocol: a.protocol, search: a.search, hash: a.hash, origin: org,params:params};

  		    };
  		    metaClass.urlParsing= metaClass.urlPrasing;

  		metaClass.toHHMMSS = function () {
  		    var sec_num = parseInt(this, 10); // don't forget the second parm
  		    var hours   = Math.floor(sec_num / 3600);
  		    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
  		    var seconds = sec_num - (hours * 3600) - (minutes * 60);
  		    if (hours   < 10) {hours   = "0"+hours;}
  		    if (minutes < 10) {minutes = "0"+minutes;}
  		    if (seconds < 10) {seconds = "0"+seconds;}
  		    var time    = hours+':'+minutes+':'+seconds;
  		    return time;
  		}



  metaClass.toFunction=function(){
  	 var arr = this.split(".");

  	  var fn = (window || this);
  	  for (var i = 0, len = arr.length; i < len; i++) {
  	    fn = fn[arr[i]];
  	  }

  	  if (typeof fn !== "function") {
  	    throw new Error("function not found");
  	  }

  	  return  fn;

  };


  metaClass.linkify=function () {
      //URLs starting with http://, https://, or ftp://
      var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
      var replacedText = this.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

      //URLs starting with www. (without // before it, or it'd re-link the ones done above)
      var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
      var replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

      //Change email addresses to mailto:: links
      var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
      var replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

      return replacedText
  };

  metaClass.passwordColor=function(){
  	var mp={Secure:'#008000',Strong:'#006000',good:'#e3cb00',weak:'#Fe3d1a'};
  	return mp[this.passwordSecurity()];
  };
  metaClass.passwordSecurity=function(){

  	   var score = this.passwordScore();
  	   if (score >= 90)
  		    return "Secure"
  	    if (score > 80)
  	        return "Strong";
  	    if (score > 60)
  	        return "good";
  	    if (score >= 30)
  	        return "weak";

  	    return "";
  }
  metaClass.passwordScore=function(){
  	 var score = 0;
  	    if (!this)
  	        return score;

  	    // award every unique letter until 5 repetitions
  	    var letters = new Object();
  	    for (var i=0; i<this.length; i++) {
  	        letters[this[i]] = (letters[this[i]] || 0) + 1;
  	        score += 5.0 / letters[this[i]];
  	    }

  	    // bonus points for mixing it up
  	    var variations = {
  	        digits: /\d/.test(this),
  	        lower: /[a-z]/.test(this),
  	        upper: /[A-Z]/.test(this),
  	        nonWords: /\W/.test(this),
  	    }

  	    variationCount = 0;
  	    for (var check in variations) {
  	        variationCount += (variations[check] == true) ? 1 : 0;
  	    }
  	    score += (variationCount - 1) * 10;

  	    return parseInt(score);

  };

  metaClass.toDate=function(delimitDate,delimitTime){
  	var mapmth={"1":"01",'01':"01","jan":"01"};
  	var mapdy={}
  	if(!delimitDate){
  		delimitDate='/';
  	}
  	if(!delimitTime){
  		delimitTime=':';
  	};

  	var parts = this.reduceWhiteSpace().match(new RegExp( "(\\d{4})" + delimitDate + "(\\d{2})" + delimitDate + "(\\d{2}) (\\d{2})"+delimitTime+"(\\d{2})"+delimitTime+"(\\d{2})" ));

  	if(!parts){
  		var mth,day,h,m,s,tmp;
  		if(this.noSpace().length === 8+2*delimitDate.length){
  			//this = this.noSpace()+' 00:00:00';
  		}
  	   parts = this.reduceWhiteSpace().match(new RegExp( "(\\d{2})" + delimitDate + "(\\d{2})" + delimitDate + "(\\d{4}) (\\d{2})"+delimitTime+"(\\d{2})"+delimitTime+"(\\d{2})" ));
  	   if(parts){
  		   s=parts[6];m=parts[5];h=parts[4];day=parts[2];mth=parts[1];
  		  s=_S.equalIfNull(s,'00');h=_S.equalIfNull(h,'00');m=_S.equalIfNull(m,'00');
  		  (s)?s=s:s='00';
  		  if(isFinite(mth)){
  			  if(parseInt((mth),10)>12){
  				   if(isFinite(day)){
  					   if(parseInt((day),10)>12){
  						   mth="12"
  					   }else{
  						   tmp=mth;
  						   mth=day;
  						   day=tmp;
  					   }
  				   }else{
  					   //When day : Ethnein,monday...
  				   }

  			   }
  		  }else{

  			  //when moth under format: Jan,June,mars,march...
  		  }


  		   return new Date(mth+"/"+day+'/'+parts[3]+' '+h+':'+m+':'+s);
  	   }else{
  		   return new Date();
  	   }

  	}else{
  		 return new Date( Date.UTC(
  			      parseInt( parts[1] )
  			    , parseInt( parts[2], 10 ) - 1
  			    , parseInt( parts[3], 10 )
  			    , parseInt( parts[4], 10 )
  			    , parseInt( parts[5], 10 )
  			    , parseInt( parts[6], 10 )
  			    , 0
  			  ));

  	}
  }

  metaClass.toInstance=function(){
  	var fnClass=this.toFunction();
  	if(fnClass){
  		return new fnClass();
  	}else{
  		return new Object();
  	}

  }
  /**
   * Demo :http://jsfiddle.net/abdennour/wzmS6/
   */

  metaClass.strRight=function(seperator)    {
      //stringValue
      var pos=this.lastIndexOf(seperator);
      var result=this.substring(pos+seperator.length,this.length)
      return result;
  };
  /**
   * DEMO: http://jsfiddle.net/abdennour/wzmS6/
   */
  metaClass.strLeft=function(seperator)    {
      //stringValue
      var pos=this.indexOf(seperator);
      var result=this.substring(0,pos)
      return result;
  };
  /**
   * DEMO:http://jsfiddle.net/abdennour/wzmS6/
   */
  metaClass.strCenter=function(seperatorRight,seperatorLeft)    {

      return this.strRight(seperatorRight).strLeft(seperatorLeft);

  };

  metaClass.noSpace = function() {
      return this.replace(/\s+/g, '');
  };

  metaClass.noParenthesesInner=function(parenthesesAlso){

  	return this.replace(/ *\([^)]*\) */g, "");
  }
  metaClass.replaceAll = function(str1, str2, ignore)
  {
  	return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g,"\\$&"),(ignore?"gi":"g")),(typeof(str2)=="string")?str2.replace(/\$/g,"$$$$"):str2);
  };
  metaClass.reduceWhiteSpace = function() {
      return this.replace(/\s+/g, ' ').replace(/^ /,'').replace(/ $/,'');
  };

  metaClass.belongTo=function(bigString){

  	return bigString.indexOf(this) !==-1;
  };
  metaClass.toInt=function(){
  	var df=parseInt(this.replace(/\D/g, ''),10);
  	if(df === NaN){
  		df=this.toASCII();
  	}
  	return df;
  };
  metaClass.toASCII=function(i){
    	if(i){
    		return this.charCodeAt(i)
    	}
      	return this.split('').map(function(c){return c.charCodeAt(0)})
      };
  metaClass.removeByTagName=function(nme){
    	if(!nme){
    		nme='div'
    	}
    	if(nme instanceof Array){
    		var tmpnme;
    		for(var i=0;i<nme.length;i++){
    			tmpnme=nme[i];

    			this.replace(/<div\b[^<]*(?:(?!<\/div>)<[^<]*)*<\/div>/gi, "")
    		}

    	}
    	nme=nme.toLowerCase();

    	return this.replace(/<div\b[^<]*(?:(?!<\/div>)<[^<]*)*<\/div>/gi, "")
     };


      String.prototype.uncapitalize=function (all){
          if(all){
             return this.split(' ').map(function(e){return e.uncapitalize();}).join(' ');
          }else{
               return this.charAt(0).toLowerCase() + this.slice(1);
          }
      }
      /*
       * To change this license header, choose License Headers in Project Properties.
       * To change this template file, choose Tools | Templates
       * and open the template in the editor.
       * abdennour
       */
      /**
       *
       * @param {type} createIfNotExist
       * @returns {undefined}
       */
      metaClass.toLiteralObject = function() {
          var fn = window, all = this.split('.')
          all.forEach(function(e, i) {
              if (!fn[e]) {
                  fn[e] = {};
                  if (i < all.length - 1) {
                      fn[e][all[i + 1]] = {}
                  }
              }
              fn = fn[e]
          });
          return window[all[0]];
      };
      metaClass.functionBuilder = function(fnc) {
          var fn = window, all = this.split('.'), toR = ''
          all.forEach(function(e, i) {
              if (!fn[e]) {
                  fn[e] = {};
                  if (i < all.length - 1) {
                      fn[e][all[i + 1]] = {}
                  } else {
                      if(typeof fnc==='function'){
                          fn[e] = fnc;
                      }else if(typeof fnc==='string'){
                          eval('fn[e]='+fnc);
                      }else{
                          fn[e]=function() {
                          }
                      }

                      toR = fn[e];
                  }
              }
              fn = fn[e]
          });
          return toR;
      };
      _S.random=function(len, an){
          an = an&&an.toLowerCase();
          var str="", i=0, min=an=="a"?10:0, max=an=="n"?10:62;
          for(;i++<len;){
            var r = Math.random()*(max-min)+min <<0;
            str += String.fromCharCode(r+=r>9?r<36?55:61:48);
          }
          return str;
      };
      _S.equalIfNull=function(e,v){
        if(e){
          return e;
        }else{
          return v;
        }
      };

})(String,String.prototype);
